pragma cashscript ^0.10.0;

contract BadgerStake() {

    /////////////////////////////////////////////
    //inputs: 
    //  0   masterBadger        [NFT]   (from contract)
    //  1   userUTXO            [BCH]   (from user)
    //outputs:
    //  0   masterBadger        [NFT]   (to contract)
    //  1   lockUTXO            [NFT]   (to contract)
    //  2   {optional} change   [BCH]   (to user)
    /////////////////////
    //parameters:
    //  amount: BCH amount user wants to lock up
    //  stakeBlocks: number of blocks to be locked up for
    //  pubkeyhash: a pubkeyhash, used to send the locked BCH back to the users address
    /////////////////////////////////////////////
    function lock(int amount, int stakeBlocks, bytes20 pubkeyhash) {   
        require(this.activeInputIndex == 0);            //this contract must be input0
        require(tx.inputs.length == 2);                 //must have exactly 2 inputs
        require(tx.outputs.length <= 3);                //must have 3 or less outputs
        require(stakeBlocks <= 65536);                  //cannot lock for longer than 65536 blocks
        require(amount >= 5000);                        //minimum 5000sats to lock so have enough for unlock()

        require(tx.inputs[0].tokenCategory == 0xd7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 + 0x02);   //input0 must be masterBadger NFT
        require(tx.inputs[1].tokenCategory == 0x);                                                                          //input1 must be BCH with no tokens

        require(tx.inputs[1].lockingBytecode == new LockingBytecodeP2PKH(pubkeyhash));                                      //provided pubkeyhash must be the pubkeyhash of input1 (users address) 
        bytes stakeLength = bytes2(stakeBlocks);                                                                            //convert stakeBlocks to bytes for inclusion into commitment
        require(tx.outputs[1].nftCommitment == pubkeyhash + bytes18(0) + stakeLength);                                      //save payout address and length of lock into output1 commitment (lockNFT)

        bytes2 stakeFee = bytes2(tx.inputs[0].nftCommitment.split(2)[0]);                                                   //get current locking fee from masterBadger's commitment
        require(tx.outputs[0].value == tx.inputs[0].value + int(stakeFee));                                                 //add locking fee to current masterBadger balance
        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);                                             //output0 sent to contract (recreate masterBadger)
        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);                                                 //carry forward masterBadger tokenCategory + capability
        require(tx.outputs[0].nftCommitment == tx.inputs[0].nftCommitment);                                                 //carry forward masterBadger commitment
        int stakeReward = amount * stakeBlocks / 100000000;                                                                 //calculate amount of BadgerCoins user will earn (amount * blocks / 1BCH)
        require(stakeReward >= 1);                                                                                          //require at least 1 BadgerCoin will be earned
        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount - stakeReward);                                       //deduct earned BadgerCoins from masterBadger
        
        require(tx.outputs[1].lockingBytecode == tx.inputs[0].lockingBytecode);                                             //output1 sent to contract (lockNFT)
        require(tx.outputs[1].tokenCategory == tx.inputs[0].tokenCategory.split(32)[0] + 0x01);                             //lockNFT is a mutable NFT of masterBadger categoryID
        require(tx.outputs[1].value == amount);                                                                             //lockNFT has BCH equal to users amount parameter
        require(tx.outputs[1].tokenAmount == stakeReward);                                                                  //lockNFT has BadgerCoin equal to calculated amount to be earned

        if (tx.outputs.length == 3) {                                                                                       //if output2 exists (change)
            require(tx.outputs[2].lockingBytecode == tx.inputs[1].lockingBytecode);                                         //change must be sent to users address
            require(tx.outputs[2].tokenCategory == 0x);                                                                     //change must not have tokens
        }
    }

    /////////////////////////////////////////////
    //inputs: 
    //  0   lockUTXO            [NFT]   (from contract)
    //outputs:
    //  0   BadgerCoins         [FUN]   (to user)
    //  1   Honey               [NFT]   (to user)
    //  2   {optional} change   [BCH]   (to user)
    /////////////////////////////////////////////
    function unlock() {
        require(this.activeInputIndex == 0);            //this contract must be input0                    
        require(tx.inputs.length == 1);                 //must have exactly 1 input
        require(tx.outputs.length == 3);                //must have exactly 3 outputs

        require(tx.inputs[0].tokenCategory == 0xd7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 + 0x01);   //input0 must be a lockNFT (masterBadger categoryID + mutable)
        
        bytes stakeBlocks = bytes2(tx.inputs[0].nftCommitment.split(38)[1]);                                                //get number of blocks locked for from lockNFT's commitment
        require(tx.age >= int(stakeBlocks));                                                                                //require the number of blocks locked for has been passed

        bytes20 payoutAddress = bytes20(tx.inputs[0].nftCommitment.split(20)[0]);                                           //get the pubkeyhash in lockNFT it was created with
        bytes payoutBytecode = new LockingBytecodeP2PKH(payoutAddress);                                                     //create the lockingBytecode for that pubkeyhash

        require(tx.outputs[0].lockingBytecode == payoutBytecode);                                                           //output0 (BadgerCoins) goes to the resulting wallet address (user who created the lock)
        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory.split(32)[0]);                                    //output0 is a masterBadger categoryID but no capability
        require(tx.outputs[0].value == 1000);                                                                               //output0 has 1000 dust satoshis so it can exist
        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount);    

        require(tx.outputs[1].lockingBytecode == payoutBytecode);                                                           //output1 (HoneyNFT) goes to the resulting wallet address (user who created the lock)
        require(tx.outputs[1].tokenCategory == tx.inputs[0].tokenCategory.split(32)[0]);                                    //output1 is a masterBadger categoryID but no capability
        require(tx.outputs[1].value == 1000);                                                                               //output1 has 1000 satoshis so it can exist
        bytes commitment = 0x0000 + bytes(tx.inputs[0].tokenAmount);                                                        //create commitment of ID0 + amount of BadgerCoins earned
        require(tx.outputs[1].nftCommitment == commitment);                                                                 //output1 has above commitment

        require(tx.outputs[2].lockingBytecode == payoutBytecode);                                                           //output2 (unlocked BCH) goes to the extracted wallet address (user who created the lock)
        require(tx.outputs[2].tokenCategory == 0x);                                                                         //output2 has no tokens
        require(tx.outputs[2].value == tx.inputs[0].value - 3000);                                                          //output2 has original locked BCH minus 3000sats (miner fee + BadgerCoin utxo + Honey utxo)
    }

    /////////////////////////////////////////////
    //inputs: 
    //  0   masterBadger        [NFT]   (from contract)
    //  1   adminUTXO           [BCH]   (from admin)
    //outputs:
    //  0   masterBadger        [NFT]   (to contract)
    //  1   withdrawUTXO        [BCH]   (to admin)
    /////////////////////
    //parameters:
    //  newFee: sets the masterBadger's locking fee (0 to 65536)
    /////////////////////////////////////////////
    function withdraw(int newFee) {
        require(this.activeInputIndex == 0);            //this contract must be input0   
        require(tx.inputs.length == 2);                 //must have exactly 2 inputs
        require(tx.outputs.length == 2);                //must have exactly 2 outputs
        require(tx.inputs[0].tokenCategory == 0xd7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 + 0x02);   //input0 must be masterBadger NFT
        require(tx.inputs[1].tokenCategory == 0x);                                                                          //input1 must be BCH with no tokens

        bytes20 adminAddress = bytes20(tx.inputs[0].nftCommitment.split(20)[1]);                                            //get admins pubkeyhash stored in masterBadger commitment
        bytes payoutBytecode = new LockingBytecodeP2PKH(adminAddress);                                                      //create the lockingBytecode for that pubkeyhash
        require(tx.inputs[1].lockingBytecode == payoutBytecode);                                                            //require the resulting lockingBytecode matches input1 (input1 is from admin address)

        require(tx.outputs[1].tokenCategory == 0x);                                                                         //output1 has no tokens
        require(tx.outputs[1].value == tx.inputs[0].value + tx.inputs[1].value - 2000);                                     //output1 takes masterBadger's BCH balance minus 2000sats (miner fee + masterBadger dust)

        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);                                             //output0 sent to contract (recreate masterBadger)
        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);                                                 //masterBadger retains its tokenCategory + capability
        require(tx.outputs[0].value == 1000);                                                                               //masterBadger set to 1000sats so it can exist
        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount);                                                     //masterBadger retains its remaining BadgerCoins
        bytes restCommitment = tx.inputs[0].nftCommitment.split(2)[1];                                                      //get last 38bytes of masterBadgers commitment
        require(tx.outputs[0].nftCommitment == bytes2(newFee) + restCommitment);                                            //update masterBadger's commitment to newFee + rest of its commitment
    }
}