{
  "contractName": "BadgerStake",
  "constructorInputs": [],
  "abi": [
    {
      "name": "lock",
      "inputs": [
        {
          "name": "amount",
          "type": "int"
        },
        {
          "name": "stakeBlocks",
          "type": "int"
        },
        {
          "name": "pubkeyhash",
          "type": "bytes20"
        }
      ]
    },
    {
      "name": "unlock",
      "inputs": []
    },
    {
      "name": "withdraw",
      "inputs": [
        {
          "name": "newFee",
          "type": "int"
        }
      ]
    }
  ],
  "bytecode": "OP_DUP OP_0 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_LESSTHANOREQUAL OP_VERIFY OP_2 OP_PICK 000001 OP_LESSTHANOREQUAL OP_VERIFY OP_OVER 8813 OP_GREATERTHANOREQUAL OP_VERIFY OP_0 OP_UTXOTOKENCATEGORY d7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 OP_2 OP_CAT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_1 OP_UTXOBYTECODE 76a914 OP_5 OP_PICK OP_CAT 88ac OP_CAT OP_EQUALVERIFY OP_2 OP_PICK OP_2 OP_NUM2BIN OP_1 OP_OUTPUTTOKENCOMMITMENT OP_5 OP_ROLL OP_0 12 OP_NUM2BIN OP_CAT OP_ROT OP_CAT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_2 OP_SPLIT OP_DROP OP_0 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_ROT OP_BIN2NUM OP_ADD OP_NUMEQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_OVER OP_3 OP_ROLL OP_MUL 00e1f505 OP_DIV OP_DUP OP_1 OP_GREATERTHANOREQUAL OP_VERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_UTXOTOKENAMOUNT OP_2 OP_PICK OP_SUB OP_NUMEQUALVERIFY OP_1 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_1 OP_CAT OP_EQUALVERIFY OP_1 OP_OUTPUTVALUE OP_3 OP_ROLL OP_NUMEQUALVERIFY OP_1 OP_OUTPUTTOKENAMOUNT OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUAL OP_IF OP_2 OP_OUTPUTBYTECODE OP_1 OP_UTXOBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_DROP OP_1 OP_ELSE OP_DUP OP_1 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_1 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_3 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY d7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 OP_1 OP_CAT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT 26 OP_SPLIT OP_NIP OP_BIN2NUM OP_CHECKSEQUENCEVERIFY OP_DROP OP_0 OP_UTXOTOKENCOMMITMENT 14 OP_SPLIT OP_DROP 76a914 OP_SWAP OP_CAT 88ac OP_CAT OP_0 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_0 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_UTXOTOKENAMOUNT OP_NUMEQUALVERIFY OP_1 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_1 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY 0000 OP_0 OP_UTXOTOKENAMOUNT OP_CAT OP_1 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_2 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE b80b OP_SUB OP_NUMEQUAL OP_NIP OP_ELSE OP_2 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY d7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 OP_2 OP_CAT OP_EQUALVERIFY OP_1 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT 14 OP_SPLIT OP_NIP 76a914 OP_SWAP OP_CAT 88ac OP_CAT OP_1 OP_UTXOBYTECODE OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_1 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_1 OP_UTXOVALUE OP_ADD d007 OP_SUB OP_NUMEQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_0 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_OUTPUTVALUE e803 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENAMOUNT OP_0 OP_UTXOTOKENAMOUNT OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_2 OP_SPLIT OP_NIP OP_0 OP_OUTPUTTOKENCOMMITMENT OP_ROT OP_2 OP_NUM2BIN OP_ROT OP_CAT OP_EQUAL OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.10.0;\r\n\r\ncontract BadgerStake() {\r\n    function lock(int amount, int stakeBlocks, bytes20 pubkeyhash) {   \r\n        require(this.activeInputIndex == 0);\r\n        require(tx.inputs.length == 2);\r\n        require(tx.outputs.length <= 3);\r\n        require(stakeBlocks <= 65536);\r\n        require(amount >= 5000);\r\n\r\n        require(tx.inputs[0].tokenCategory == 0xd7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 + 0x02);\r\n        require(tx.inputs[1].tokenCategory == 0x);\r\n\r\n        require(tx.inputs[1].lockingBytecode == new LockingBytecodeP2PKH(pubkeyhash));\r\n        bytes stakeLength = bytes2(stakeBlocks);\r\n        require(tx.outputs[1].nftCommitment == pubkeyhash + bytes18(0) + stakeLength);\r\n\r\n        bytes2 stakeFee = bytes2(tx.inputs[0].nftCommitment.split(2)[0]);\r\n        require(tx.outputs[0].value == tx.inputs[0].value + int(stakeFee));\r\n        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\r\n        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\r\n        require(tx.outputs[0].nftCommitment == tx.inputs[0].nftCommitment);\r\n        int stakeReward = amount * stakeBlocks / 100000000;\r\n        require(stakeReward >= 1);\r\n        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount - stakeReward);\r\n        \r\n        require(tx.outputs[1].lockingBytecode == tx.inputs[0].lockingBytecode);\r\n        require(tx.outputs[1].tokenCategory == tx.inputs[0].tokenCategory.split(32)[0] + 0x01);\r\n        require(tx.outputs[1].value == amount);\r\n        require(tx.outputs[1].tokenAmount == stakeReward);\r\n\r\n        if (tx.outputs.length == 3) {\r\n            require(tx.outputs[2].lockingBytecode == tx.inputs[1].lockingBytecode);\r\n            require(tx.outputs[2].tokenCategory == 0x);\r\n        }\r\n    }\r\n\r\n    function unlock() {\r\n        require(this.activeInputIndex == 0);\r\n        require(tx.inputs.length == 1);\r\n        require(tx.outputs.length == 3);\r\n\r\n        require(tx.inputs[0].tokenCategory == 0xd7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 + 0x01);\r\n        \r\n        bytes stakeBlocks = bytes2(tx.inputs[0].nftCommitment.split(38)[1]);\r\n        require(tx.age >= int(stakeBlocks));\r\n\r\n        bytes20 payoutAddress = bytes20(tx.inputs[0].nftCommitment.split(20)[0]);\r\n        bytes payoutBytecode = new LockingBytecodeP2PKH(payoutAddress);\r\n\r\n        require(tx.outputs[0].lockingBytecode == payoutBytecode);\r\n        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory.split(32)[0]);\r\n        require(tx.outputs[0].value == 1000);\r\n        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount);    \r\n\r\n        require(tx.outputs[1].lockingBytecode == payoutBytecode);\r\n        require(tx.outputs[1].tokenCategory == tx.inputs[0].tokenCategory.split(32)[0]);\r\n        require(tx.outputs[1].value == 1000);\r\n        bytes commitment = 0x0000 + bytes(tx.inputs[0].tokenAmount);\r\n        require(tx.outputs[1].nftCommitment == commitment);\r\n\r\n        require(tx.outputs[2].lockingBytecode == payoutBytecode);\r\n        require(tx.outputs[2].tokenCategory == 0x);\r\n        require(tx.outputs[2].value == tx.inputs[0].value - 3000);\r\n    }\r\n\r\n    function withdraw(int newFee) {\r\n        require(this.activeInputIndex == 0);\r\n        require(tx.inputs.length == 2);\r\n        require(tx.outputs.length == 2);\r\n        require(tx.inputs[0].tokenCategory == 0xd7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24 + 0x02);\r\n        require(tx.inputs[1].tokenCategory == 0x);\r\n\r\n        bytes20 adminAddress = bytes20(tx.inputs[0].nftCommitment.split(20)[1]);\r\n        bytes payoutBytecode = new LockingBytecodeP2PKH(adminAddress);\r\n        require(tx.inputs[1].lockingBytecode == payoutBytecode);\r\n\r\n        require(tx.outputs[1].tokenCategory == 0x);\r\n        require(tx.outputs[1].value == tx.inputs[0].value + tx.inputs[1].value - 2000);\r\n\r\n        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\r\n        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);\r\n        require(tx.outputs[0].value == 1000);\r\n        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount);\r\n        bytes restCommitment = tx.inputs[0].nftCommitment.split(2)[1];\r\n        require(tx.outputs[0].nftCommitment == bytes2(newFee) + restCommitment);\r\n    }\r\n}",
  "debug": {
    "bytecode": "0079009c63c0009c69c3529c69c453a169527903000001a1695179028813a26900ce20d7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24527e876951ce00876951c70376a91455797e0288ac7e87695279528051d2557a000112807e527a7e876900cf527f7500cc00c6527a81939c6900cd00c7876900d100ce876900d200cf87695179537a950400e1f50596007951a26900d300d05279949c6951cd00c7876951d100ce01207f75517e876951cc537a9c6951d3517a9c69c4539c6352cd51c7876952d1008769685177670079519c63c0009c69c3519c69c4539c6900ce20d7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24517e876900cf01267f77007a81b27500cf01147f750376a914517a7e0288ac7e00cd5179876900d100ce01207f75876900cc02e8039c6900d300d09c6951cd5179876951d100ce01207f75876951cc02e8039c6902000000d07e51d2517a876952cd517a876952d100876952cc00c602b80b949c7767007a529c69c0009c69c3529c69c4529c6900ce20d7ff0a63d5c1cbe1ced509314fe3caca563a73095be37734744c40dbce6e2f24527e876951ce00876900cf01147f770376a914517a7e0288ac7e51c7517a876951d100876951cc00c651c69302d007949c6900cd00c7876900d100ce876900cc02e8039c6900d300d09c6900cf527f7700d2527a5280527a7e876868",
    "sourceMap": "4:4:36:5;;;;;5:16:5:37;:41::42;:16:::1;:8::44;6:16:6:32:0;:36::37;:16:::1;:8::39;7:16:7:33:0;:37::38;:16:::1;:8::40;8:16:8:27:0;;:31::36;:16:::1;:8::38;9:16:9:22:0;;:26::30;:16:::1;:8::32;11:26:11:27:0;:16::42;:46::112;:115::119;:46:::1;:16;:8::121;12:26:12:27:0;:16::42;:46::48;:16:::1;:8::50;14:26:14:27:0;:16::44;:48::84;:73::83;;:48::84;;;:16:::1;:8::86;15:35:15:46:0;;:28::47:1;;16:27:16:28:0;:16::43;:47::57;;:68::69;:60::70:1;;:47;:73::84:0;;:47:::1;:16;:8::86;18:43:18:44:0;:33::59;:66::67;:33::68:1;:::71;19:27:19:28:0;:16::35;:49::50;:39::57;:64::72;;:60::73:1;:39;:16;:8::75;20:27:20:28:0;:16::45;:59::60;:49::77;:16:::1;:8::79;21:27:21:28:0;:16::43;:57::58;:47::73;:16:::1;:8::75;22:27:22:28:0;:16::43;:57::58;:47::73;:16:::1;:8::75;23:26:23:32:0;;:35::46;;:26:::1;:49::58:0;:26:::1;24:16:24:27:0;;:31::32;:16:::1;:8::34;25:27:25:28:0;:16::41;:55::56;:45::69;:72::83;;:45:::1;:16;:8::85;27:27:27:28:0;:16::45;:59::60;:49::77;:16:::1;:8::79;28:27:28:28:0;:16::43;:57::58;:47::73;:80::82;:47::83:1;:::86;:89::93:0;:47:::1;:16;:8::95;29:27:29:28:0;:16::35;:39::45;;:16:::1;:8::47;30:27:30:28:0;:16::41;:45::56;;:16:::1;:8::58;32:12:32:29:0;:33::34;:12:::1;:36:35:9:0;33:31:33:32;:20::49;:63::64;:53::81;:20:::1;:12::83;34:31:34:32:0;:20::47;:51::53;:20:::1;:12::55;32:36:35:9;4:4:36:5;;;38::65::0;;;;;39:16:39:37;:41::42;:16:::1;:8::44;40:16:40:32:0;:36::37;:16:::1;:8::39;41:16:41:33:0;:37::38;:16:::1;:8::40;43:26:43:27:0;:16::42;:46::112;:115::119;:46:::1;:16;:8::121;45:45:45:46:0;:35::61;:68::70;:35::71:1;:::74;46:30:46:41:0;;:26::42:1;:8::44;;48:50:48:51:0;:40::66;:73::75;:40::76:1;:::79;49:31:49:70:0;:56::69;;:31::70;;;51:27:51:28;:16::45;:49::63;;:16:::1;:8::65;52:27:52:28:0;:16::43;:57::58;:47::73;:80::82;:47::83:1;:::86;:16;:8::88;53:27:53:28:0;:16::35;:39::43;:16:::1;:8::45;54:27:54:28:0;:16::41;:55::56;:45::69;:16:::1;:8::71;56:27:56:28:0;:16::45;:49::63;;:16:::1;:8::65;57:27:57:28:0;:16::43;:57::58;:47::73;:80::82;:47::83:1;:::86;:16;:8::88;58:27:58:28:0;:16::35;:39::43;:16:::1;:8::45;59:27:59:33:0;:52::53;:42::66;:27::67:1;60::60:28:0;:16::43;:47::57;;:16:::1;:8::59;62:27:62:28:0;:16::45;:49::63;;:16:::1;:8::65;63:27:63:28:0;:16::43;:47::49;:16:::1;:8::51;64:27:64:28:0;:16::35;:49::50;:39::57;:60::64;:39:::1;:16;38:4:65:5;;67::87::0;;;;;68:16:68:37;:41::42;:16:::1;:8::44;69:16:69:32:0;:36::37;:16:::1;:8::39;70:16:70:33:0;:37::38;:16:::1;:8::40;71:26:71:27:0;:16::42;:46::112;:115::119;:46:::1;:16;:8::121;72:26:72:27:0;:16::42;:46::48;:16:::1;:8::50;74:49:74::0;:39::65;:72::74;:39::75:1;:::78;75:31:75:69:0;:56::68;;:31::69;;;76:26:76:27;:16::44;:48::62;;:16:::1;:8::64;78:27:78:28:0;:16::43;:47::49;:16:::1;:8::51;79:27:79:28:0;:16::35;:49::50;:39::57;:70::71;:60::78;:39:::1;:81::85:0;:39:::1;:16;:8::87;81:27:81:28:0;:16::45;:59::60;:49::77;:16:::1;:8::79;82:27:82:28:0;:16::43;:57::58;:47::73;:16:::1;:8::75;83:27:83:28:0;:16::35;:39::43;:16:::1;:8::45;84:27:84:28:0;:16::41;:55::56;:45::69;:16:::1;:8::71;85:41:85:42:0;:31::57;:64::65;:31::66:1;:::69;86:27:86:28:0;:16::43;:54::60;;:47::61:1;;:64::78:0;;:47:::1;:16;3:0:88:1;",
    "logs": [],
    "requireMessages": []
  },
  "compiler": {
    "name": "cashc",
    "version": "0.10.0-next.4"
  },
  "updatedAt": "2024-05-09T20:24:02.719Z"
}